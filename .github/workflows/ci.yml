name: Coventry DW Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run Black (Code Formatting)
      run: black --check --diff src/ tests/
      
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff src/ tests/
      
    - name: Run Flake8 (Linting)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run MyPy (Type Checking)
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true  # Type checking is advisory
      
    - name: Run Bandit (Security Linting)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Safety (Dependency Security Check)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: coventry_dw_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-mock
        
    - name: Set up test environment
      run: |
        cp .env.example .env
        mkdir -p logs output/bronze output/silver output/gold output/quarantine
        
    - name: Run Unit Tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: coventry_dw_test
        DB_USER: postgres
        DB_PASSWORD: postgres123
        ENVIRONMENT: test
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Run Integration Tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: coventry_dw_test
        DB_USER: postgres
        DB_PASSWORD: postgres123
        ENVIRONMENT: test
      run: |
        pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=html
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload Coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Schema and Data Validation
  data-validation:
    name: Data Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate Sample Data
      run: |
        python -c "
        import pandas as pd
        import json
        from pathlib import Path
        
        # Validate CSV data
        df = pd.read_csv('data/transactions.csv')
        print(f'Transactions CSV: {len(df)} rows, {len(df.columns)} columns')
        assert len(df) > 0, 'No data in transactions.csv'
        
        # Validate JSON data
        with open('data/accounts.json') as f:
            accounts = json.load(f)
        print(f'Accounts JSON: {len(accounts)} records')
        assert len(accounts) > 0, 'No data in accounts.json'
        
        print('Data validation passed!')
        "
        
    - name: Test Schema Detection
      run: |
        python -c "
        from src.schema import SchemaManager
        import pandas as pd
        
        # Test schema auto-detection
        sm = SchemaManager('test_schemas')
        df = pd.read_csv('data/transactions.csv')
        schema = sm.auto_detect_schema(df, 'test_transactions')
        
        print(f'Detected schema with {len(schema.fields)} fields')
        assert len(schema.fields) > 0, 'Schema detection failed'
        
        print('Schema validation passed!')
        "

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: coventry-dw-pipeline:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Image
      run: |
        docker run --rm coventry-dw-pipeline:test python -c "
        from src.utils.config import config
        print('Docker image test passed!')
        "
        
    - name: Run Container Health Check
      run: |
        docker run --rm --entrypoint="" coventry-dw-pipeline:test python -c "
        import sys
        print('Container health check passed!')
        sys.exit(0)
        "

  # Infrastructure Validation
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check
        
    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd infra/terraform
        terraform validate
        
    - name: Terraform Plan (Dry Run)
      run: |
        cd infra/terraform
        terraform plan -var="use_localstack=true" -var="create_rds=false" -out=tfplan
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: infra/terraform/tfplan

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: coventry_dw_perf
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler
        
    - name: Run Performance Tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: coventry_dw_perf
        DB_USER: postgres
        DB_PASSWORD: postgres123
        ENVIRONMENT: test
      run: |
        python -c "
        import time
        import pandas as pd
        from src.ingestion import DataIngester
        
        # Performance test for ingestion
        start_time = time.time()
        ingester = DataIngester()
        df, metadata = ingester.ingest_csv('data/transactions.csv', 'perf_test')
        duration = time.time() - start_time
        
        print(f'Ingestion performance: {len(df)} rows in {duration:.2f} seconds')
        print(f'Throughput: {len(df)/duration:.0f} rows/second')
        
        # Assert performance thresholds
        assert duration < 10, f'Ingestion too slow: {duration:.2f}s'
        assert len(df)/duration > 100, f'Throughput too low: {len(df)/duration:.0f} rows/s'
        "

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, data-validation, docker, terraform]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.coventry-dw.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: coventry-dw-pipeline
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Deploy to ECS
      run: |
        echo "Deploying to ECS staging environment..."
        # Add ECS deployment commands here
        
    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests against staging environment..."
        # Add smoke test commands here

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [lint, test, data-validation, docker, terraform]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.test.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Coventry DW Pipeline CI passed! ✅'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on Failure
      if: needs.test.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Coventry DW Pipeline CI failed! ❌'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
